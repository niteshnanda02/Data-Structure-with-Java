import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
    static class p implements Comparable<p>{
        int v,f;
        p(int a,int b){
            v=a;
            f=b;
        }
        
        @Override 
        public int compareTo(p p){
            if(this.f==p.f)
                return p.v-this.v;
                
            return this.f-p.f;    
        }
    }
	public static void main (String[] args)
	 {
	 //code
	    PriorityQueue<p> maxHeap=new PriorityQueue<>(Collections.reverseOrder());
	    Map<Integer,Integer> map=new HashMap<>();
	    Scanner s=new Scanner(System.in);
	    int t=s.nextInt();
	    while(t-->0){
	        maxHeap.clear();
	        map.clear();
	        int n=s.nextInt();
	        int[] a=new int[n];
	        for(int i=0;i<n;i++){
	            a[i]=s.nextInt();
	            map.put(a[i],map.getOrDefault(a[i],0)+1);
	
	        }
	        Set<Map.Entry<Integer,Integer>> entries=map.entrySet();
	        
	        for(Map.Entry<Integer,Integer> entry:entries){
	            p p=new p(entry.getKey(),entry.getValue());
	            maxHeap.add(p);
	        }
	        
	        
	        while(!maxHeap.isEmpty()){
	            p rp=maxHeap.remove();
	            for(int i=0;i<rp.f;i++){
	                System.out.print(rp.v+" ");
	            }
	        }
	        System.out.println();
	             
	    }
	    
	 }
}
