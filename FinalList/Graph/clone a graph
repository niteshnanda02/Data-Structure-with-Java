/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {
    public Node cloneGraph(Node node) {
        if(node==null)
            return node;
        Node[] visited=new Node[101];
        Node copy=new Node(node.val);
        
        visited[copy.val]=copy;
        //Iterate neighbours
        for(Node curr:node.neighbors){
            if(visited[curr.val]==null){
                Node newNode=new Node(curr.val);
                copy.neighbors.add(newNode);
                dfs(curr,newNode,visited);
            }else{
                copy.neighbors.add(visited[curr.val]);
            }
        }
        
        return copy;
    }
    void dfs(Node curr,Node node,Node[] visited){
        visited[node.val]=node;
        for(Node ele:curr.neighbors){
            if(visited[ele.val]==null){
                Node nn=new Node(ele.val);
                node.neighbors.add(nn);
                dfs(ele,nn,visited);
            }else{
                node.neighbors.add(visited[ele.val]);
            }
        }
    }
}
