class Solution {
    static int[] visited;
    static ArrayList<ArrayList<Integer>> adj;
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1)
            return -1;
        adj=new ArrayList<>(n);
        for(int i=0;i<n;i++)
            adj.add(new ArrayList<>());
        for(int i=0;i<connections.length;i++){
            int a=connections[i][0],b=connections[i][1];
            adj.get(a).add(b);
            adj.get(b).add(a);
        }
        int cc=0;
        visited=new int[n];
        for(int i=0;i<n;i++){
            if(visited[i]==0){
                cc++;
                dfs(i);
            }
        }
        
        
        
        return cc-1;
    }
    void dfs(int node){
        visited[node]=1;
        for(int child:adj.get(node)){
            if(visited[child]==0)
                dfs(child);
        }
    }
}
