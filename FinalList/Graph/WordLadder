class Solution {
    static ArrayList<ArrayList<Integer>> adj;
    static int[] visited,distance;
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(beginWord.equals(endWord))
            return 0;
        int n=wordList.size();
        if(n==0)
            return 0;
        if(!wordList.contains(endWord))
            return 0;
        adj=new ArrayList<>(n+1);
        for(int i=0;i<n+1;i++)
            adj.add(new ArrayList<>());
        
        visited=new int[n+1];
        distance=new int[n+1];
        Arrays.fill(distance,-1);
        createGraph(wordList,n);
        int src=0;
        int dis=2;
        if(wordList.contains(beginWord)){
            src=wordList.indexOf(beginWord);
            dis--;
        }else{
            src=find(wordList,n,beginWord);
            
        }
        bfs(src);
        int end=wordList.indexOf(endWord);
        if(distance[end]==-1)
            return 0;
        else
            return distance[end]+dis;
    }
    int find(List<String> l,int n,String begin){
        for(int i=0;i<n;i++){
            if(isValid(l.get(i),begin))
                return i;
        }
        return 0;
    }
    void createGraph(List<String> w,int n){
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(isValid(w.get(i),w.get(j))){
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
    }
    
    boolean isValid(String s1,String s2){
        int c=0;
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i)!=s2.charAt(i))
                c++;
        }
        if(c>1)
            return false;
        return true;
    }
    void bfs(int src){
        Queue<Integer> q=new LinkedList<>();
        q.add(src);
        visited[src]=1;
        distance[src]=0;
        while(!q.isEmpty()){
            int rv=q.remove();
            for(int child:adj.get(rv)){
                if(visited[child]==0){
                    visited[child]=1;
                    distance[child]=distance[rv]+1;
                    q.add(child);
                }
            }
        }
    }
}
