import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
     static class Node implements Comparable<Node>{
         char data;
         int cost;
         Node left,right;
         Node(char d,int c){
             data=d;
             cost=c;
             left=null;
             right=null;
         }
         
         Node(char d,int c,Node l,Node r){
             data=d;
             cost=c;
             left=l;
             right=r;
         }
         @Override
         public int compareTo(Node node){
             if(this.cost==node.cost){
                 return 1;
             }
             return this.cost-node.cost;
         }
     }
	public static void main (String[] args)
	 {
	 //code
	    Scanner s=new Scanner(System.in);
	    int t=s.nextInt();
	    while(t-->0){
	        String str=s.next();
	        int n=str.length();
	        int[] freq=new int[n];
	        for(int i=0;i<n;i++)
	            freq[i]=s.nextInt();
	        
	        //create a tree
	        PriorityQueue<Node> minHeap=new PriorityQueue<>();
	        for(int i=0;i<n;i++){
	            minHeap.add(new Node(str.charAt(i),freq[i]));
	        }
	        //Combine nodes untill you get root node;
	        
	        Node root=null;
	        while(minHeap.size()>1){
	            Node one=minHeap.remove(),two=minHeap.remove();
	            
	            Node combine=new Node('\0',one.cost+two.cost,one,two);
	            root=combine;
	            minHeap.add(combine);
	        }
	        
	        preorder(root,"");
	        System.out.println();
	    }
	 }
	 static void preorder(Node node,String osf){
	   
	   if(node.left==null&&node.right==null&&Character.isLetter(node.data)){
	     System.out.print(osf+" ");
	     return;
	   }
	   
	   preorder(node.left,osf+"0");
	   preorder(node.right,osf+"1");
	   
	 }
}
