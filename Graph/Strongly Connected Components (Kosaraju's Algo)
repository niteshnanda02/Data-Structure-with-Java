class Solution
{
    static ArrayList<ArrayList<Integer>> rev;
    static Stack<Integer> stack;
    static boolean[] vis;
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj) {
        //code here
        stack=new Stack<>();
        vis=new boolean[V];
        rev=new ArrayList<>(V);
        for(int i=0;i<V;i++)
            rev.add(new ArrayList<>());
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs1(i,adj);
            }
        }
        reverse(adj,V);
        Arrays.fill(vis,false);
        int ans=0;
        while(!stack.isEmpty()){
            int v=stack.pop();
            if(!vis[v]){
                ans++;
                dfs2(v);
        
            }
        }
        return ans;
    }
    
    void dfs1(int v,ArrayList<ArrayList<Integer>> adj){
        vis[v]=true;
        for(int child:adj.get(v)){
            if(!vis[child]){
                dfs1(child,adj);
            }
        }
        stack.push(v);
    }
    
    void reverse(ArrayList<ArrayList<Integer>> adj,int V){
        for(int i=0;i<V;i++){
            for(int j:adj.get(i)){
                rev.get(j).add(i);
            }
        }
    }
    
    void dfs2(int v){
        vis[v]=true;
        for(int child:rev.get(v)){
            if(!vis[child]){
                dfs2(child);
            }
        }
    }
}
